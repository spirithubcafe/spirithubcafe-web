import React, { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { 
  Sparkles, 
  RefreshCw, 
  Eye, 
  Check,
  X
} from 'lucide-react'
import { useSEOGenerator } from '@/hooks/useSEOGenerator'
import { toast } from 'react-hot-toast'

interface SEOAutoGenerateButtonProps {
  type: 'product' | 'category' | 'page'
  itemId: string
  onSEOGenerated?: (seoData: any) => void
  currentSEO?: {
    meta_title?: string
    meta_description?: string
    meta_keywords?: string
    slug?: string
    seo_auto_generated?: boolean
  }
  className?: string
  variant?: 'default' | 'outline' | 'ghost'
  size?: 'sm' | 'default' | 'lg'
}

const SEOAutoGenerateButton: React.FC<SEOAutoGenerateButtonProps> = ({
  type,
  itemId,
  onSEOGenerated,
  currentSEO,
  className = '',
  variant = 'outline',
  size = 'sm'
}) => {
  const { generateSingleSEO, generateSEOPreview, isGenerating } = useSEOGenerator()
  const [showPreview, setShowPreview] = useState(false)
  const [previewData, setPreviewData] = useState<any>(null)

  const handleGenerate = async () => {
    try {
      const success = await generateSingleSEO(type, itemId)
      if (success && onSEOGenerated) {
        // Fetch the updated SEO data and pass it to parent
        const seoData = await generateSEOPreview(type, itemId)
        onSEOGenerated(seoData)
      }
    } catch (error) {
      console.error('Error generating SEO:', error)
      toast.error('فشل في تحديث السيو')
    }
  }

  const handlePreview = async () => {
    try {
      const preview = await generateSEOPreview(type, itemId)
      if (preview) {
        setPreviewData(preview)
        setShowPreview(true)
      }
    } catch (error) {
      console.error('Error generating preview:', error)
      toast.error('فشل في إنشاء معاينة السيو')
    }
  }

  const handleApplyPreview = async () => {
    if (previewData && onSEOGenerated) {
      onSEOGenerated(previewData)
      setShowPreview(false)
      toast.success('تم تطبيق بيانات السيو')
    }
  }

  const isAutoGenerated = currentSEO?.seo_auto_generated
  const hasAnyMetaData = currentSEO?.meta_title || currentSEO?.meta_description || currentSEO?.meta_keywords

  const PreviewModal = () => {
    if (!showPreview || !previewData) return null

    return (
      <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-lg max-w-2xl w-full max-h-[80vh] overflow-y-auto">
          <div className="p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold flex items-center gap-2">
                <Eye className="h-5 w-5" />
                معاينة السيو المقترح
              </h3>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowPreview(false)}
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="text-sm font-medium text-gray-700">العنوان الرئيسي (Meta Title)</label>
                <div className="p-3 bg-gray-50 rounded-md text-sm mt-1 border">
                  {previewData.meta_title}
                </div>
                <div className="text-xs text-gray-500 mt-1">
                  الطول: {previewData.meta_title?.length || 0} حرف (الموصى به: 50-60 حرف)
                </div>
              </div>
              
              <div>
                <label className="text-sm font-medium text-gray-700">الوصف (Meta Description)</label>
                <div className="p-3 bg-gray-50 rounded-md text-sm mt-1 border">
                  {previewData.meta_description}
                </div>
                <div className="text-xs text-gray-500 mt-1">
                  الطول: {previewData.meta_description?.length || 0} حرف (الموصى به: 150-160 حرف)
                </div>
              </div>
              
              <div>
                <label className="text-sm font-medium text-gray-700">الكلمات المفتاحية</label>
                <div className="p-3 bg-gray-50 rounded-md text-sm mt-1 border">
                  {previewData.meta_keywords}
                </div>
              </div>
              
              <div>
                <label className="text-sm font-medium text-gray-700">الرابط المختصر (Slug)</label>
                <div className="p-3 bg-gray-50 rounded-md text-sm mt-1 border font-mono">
                  {previewData.slug}
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium text-gray-700">Open Graph Title</label>
                  <div className="p-3 bg-blue-50 rounded-md text-sm mt-1 border">
                    {previewData.og_title}
                  </div>
                </div>
                
                <div>
                  <label className="text-sm font-medium text-gray-700">Twitter Title</label>
                  <div className="p-3 bg-sky-50 rounded-md text-sm mt-1 border">
                    {previewData.twitter_title}
                  </div>
                </div>
              </div>
            </div>

            <div className="flex gap-3 mt-6 pt-4 border-t">
              <Button
                onClick={handleApplyPreview}
                size="sm"
                className="flex-1"
              >
                <Check className="h-4 w-4 mr-2" />
                تطبيق هذا السيو
              </Button>
              <Button
                onClick={() => setShowPreview(false)}
                variant="outline"
                size="sm"
                className="flex-1"
              >
                <X className="h-4 w-4 mr-2" />
                إلغاء
              </Button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <>
      <div className={`flex items-center gap-2 ${className}`}>
        {/* Status Badge */}
        {hasAnyMetaData && (
          <Badge 
            variant={isAutoGenerated ? "default" : "secondary"}
            className="text-xs"
          >
            {isAutoGenerated ? 'تم التحديث تلقائياً' : 'تم التحديث يدوياً'}
          </Badge>
        )}
        
        {/* Preview Button */}
        <Button
          onClick={handlePreview}
          variant="ghost"
          size={size}
          disabled={isGenerating}
        >
          <Eye className="h-4 w-4 mr-1" />
          معاينة
        </Button>
        
        {/* Generate Button */}
        <Button
          onClick={handleGenerate}
          variant={variant}
          size={size}
          disabled={isGenerating}
        >
          {isGenerating ? (
            <RefreshCw className="h-4 w-4 mr-1 animate-spin" />
          ) : (
            <Sparkles className="h-4 w-4 mr-1" />
          )}
          {hasAnyMetaData ? 'تحديث السيو' : 'إنشاء السيو'}
        </Button>
      </div>

      <PreviewModal />
    </>
  )
}

export default SEOAutoGenerateButton
