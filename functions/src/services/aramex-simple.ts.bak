import { logger } from "firebase-functions";
import axios from "axios";
import {
  AramexClientInfo,
  AramexSettings,
  ShippingRateRequest,
  ShippingRateResponse,
  CreateShipmentRequest,
  CreateShipmentResponse,
  GetLabelRequest,
  GetLabelResponse,
  SchedulePickupRequest,
  SchedulePickupResponse,
} from "../types/aramex";

// Simplified Aramex Service without SOAP
class AramexService {
  
  private async getSettings(): Promise<AramexSettings> {
    // For now, return mock settings
    return {
      accountNumber: process.env.ARAMEX_ACCOUNT_NUMBER || "",
      username: process.env.ARAMEX_USERNAME || "",
      password: process.env.ARAMEX_PASSWORD || "",
      apiKey: process.env.ARAMEX_API_KEY || "",
      version: "1.0",
      accountPin: process.env.ARAMEX_ACCOUNT_PIN || "",
      accountEntity: process.env.ARAMEX_ACCOUNT_ENTITY || "",
      accountCountryCode: process.env.ARAMEX_ACCOUNT_COUNTRY_CODE || "OM",
      source: 24
    };
  }

  async calculateRate(data: ShippingRateRequest): Promise<ShippingRateResponse> {
    try {
      logger.info("Calculating Aramex rate (HTTP mode)", data);
      
      // For now, return a mock response
      const mockRate = {
        totalAmount: 25.0,
        currency: "AED",
        details: {
          baseRate: 20.0,
          fuelSurcharge: 3.0,
          vatAmount: 2.0,
          codAmount: 0,
          insuranceAmount: 0
        },
        estimatedDeliveryDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
        transitTime: "2-3 business days"
      };

      return {
        success: true,
        rate: mockRate,
        message: "Rate calculated successfully (mock data)"
      };

    } catch (error) {
      logger.error("Error calculating Aramex rate:", error);
      throw new Error("Failed to calculate shipping rate");
    }
  }

  async createShipment(data: CreateShipmentRequest): Promise<CreateShipmentResponse> {
    try {
      logger.info("Creating Aramex shipment (HTTP mode)", { orderId: data.orderId });
      
      // Mock shipment creation
      const mockShipment = {
        awbNumber: "AWB" + Date.now().toString(),
        trackingNumber: "TRK" + Date.now().toString(),
        labelUrl: "https://example.com/label.pdf",
        totalCost: 25.0,
        currency: "AED"
      };

      return {
        success: true,
        shipment: mockShipment,
        message: "Shipment created successfully (mock data)"
      };

    } catch (error) {
      logger.error("Error creating Aramex shipment:", error);
      throw new Error("Failed to create shipment");
    }
  }

  async getLabel(data: GetLabelRequest): Promise<GetLabelResponse> {
    try {
      logger.info("Getting Aramex label (HTTP mode)", { awbNumber: data.awbNumber });
      
      // Mock label response
      return {
        success: true,
        labelUrl: "https://example.com/label.pdf",
        labelData: "base64-encoded-pdf-data",
        message: "Label retrieved successfully (mock data)"
      };

    } catch (error) {
      logger.error("Error getting Aramex label:", error);
      throw new Error("Failed to get label");
    }
  }

  async schedulePickup(data: SchedulePickupRequest): Promise<SchedulePickupResponse> {
    try {
      logger.info("Scheduling Aramex pickup (HTTP mode)", { pickupDate: data.pickupDate });
      
      // Mock pickup scheduling
      return {
        success: true,
        pickupNumber: "PU" + Date.now().toString(),
        message: "Pickup scheduled successfully (mock data)"
      };

    } catch (error) {
      logger.error("Error scheduling Aramex pickup:", error);
      throw new Error("Failed to schedule pickup");
    }
  }
}

export const aramexService = new AramexService();