import { logger } from "firebase-functions";
import * as admin from "firebase-admin";
import axios from "axios";
import {
  AramexClientInfo,
  AramexSettings,
  ShippingRateRequest,
  ShippingRateResponse,
  CreateShipmentRequest,
  CreateShipmentResponse,
  GetLabelRequest,
  GetLabelResponse,
  SchedulePickupRequest,
  SchedulePickupResponse,
  AramexShipment,
  AramexPickup,
} from "../types/aramex";

// Aramex WSDL URLs
const ARAMEX_WSDL = {
  test: "https://ws.dev.aramex.net/shippingapi.v2/shipping/service_1_0.svc?wsdl",
  production: "https://ws.aramex.net/shippingapi.v2/shipping/service_1_0.svc?wsdl",
};

export class AramexService {
  private settings: AramexSettings | null = null;

  async getSettings(): Promise<AramexSettings | null> {
    if (this.settings) {
      return this.settings;
    }

    try {
      const settingsDoc = await admin
        .firestore()
        .doc("settings/aramex")
        .get();

      if (settingsDoc.exists) {
        this.settings = settingsDoc.data() as AramexSettings;
        return this.settings;
      }
    } catch (error) {
      logger.error("Error fetching Aramex settings:", error);
    }

    return null;
  }

  private getClientInfo(settings: AramexSettings): AramexClientInfo {
    return {
      username: settings.username,
      password: settings.password,
      version: "v1.0",
      accountNumber: settings.accountNumber,
      accountPin: settings.accountPin,
      accountEntity: settings.accountEntity,
      accountCountryCode: settings.accountCountryCode,
    };
  }

  private getWsdlUrl(environment: "test" | "production"): string {
    return ARAMEX_WSDL[environment];
  }

  async calculateShippingRate(
    request: ShippingRateRequest
  ): Promise<ShippingRateResponse> {
    try {
      const settings = await this.getSettings();
      if (!settings || !settings.enabled) {
        return {
          success: false,
          error: "Aramex service is not configured or disabled",
        };
      }

      const clientInfo = this.getClientInfo(settings);
      const wsdlUrl = this.getWsdlUrl(settings.environment);

      const params = {
        ClientInfo: clientInfo,
        Transaction: { Reference1: `RATE_${Date.now()}` },
        OriginAddress: {
          City: request.originCity,
          CountryCode: request.originCountry,
        },
        DestinationAddress: {
          City: request.destCity,
          CountryCode: request.destCountry,
        },
        ShipmentDetails: {
          PaymentType: "P",
          ProductGroup: "EXP",
          ProductType: "PPX",
          ActualWeight: { Value: request.weight, Unit: "KG" },
          ChargeableWeight: { Value: request.weight, Unit: "KG" },
          NumberOfPieces: 1,
          ...(request.dimensions && {
            Dimensions: {
              Length: request.dimensions.length,
              Width: request.dimensions.width,
              Height: request.dimensions.height,
              Unit: "cm",
            },
          }),
        },
      };

      const client = await soap.createClientAsync(wsdlUrl);
      const [result] = await client.CalculateRateAsync(params);

      if (result.HasErrors) {
        const errorMsg =
          result.Notifications?.Notification?.[0]?.Message ||
          result.Notifications?.Notification?.Message ||
          "Unknown error occurred";
        logger.error("Aramex rate calculation error:", errorMsg);
        return { success: false, error: errorMsg };
      }

      const amount = result.TotalAmount?.Value;
      const currency = result.TotalAmount?.CurrencyCode;

      if (!amount) {
        return { success: false, error: "No rate returned from Aramex" };
      }

      logger.info(`Aramex rate calculated: ${amount} ${currency}`);
      return { success: true, rate: amount, currency };
    } catch (error) {
      logger.error("Error in calculateShippingRate:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      };
    }
  }

  async createShipment(
    request: CreateShipmentRequest
  ): Promise<CreateShipmentResponse> {
    try {
      const settings = await this.getSettings();
      if (!settings || !settings.enabled) {
        return {
          success: false,
          error: "Aramex service is not configured or disabled",
        };
      }

      const clientInfo = this.getClientInfo(settings);
      const wsdlUrl = this.getWsdlUrl(settings.environment);
      const senderInfo = settings.senderInfo;

      const shipment: AramexShipment = {
        Reference1: request.orderId,
        Shipper: {
          Reference1: "",
          PartyAddress: {
            Line1: senderInfo.addressLine,
            City: request.originCity,
            CountryCode: request.originCountry,
          },
          Contact: {
            PersonName: senderInfo.contactPerson,
            CompanyName: senderInfo.companyName,
            PhoneNumber1: senderInfo.phoneNumber,
            EmailAddress: senderInfo.emailAddress,
          },
        },
        Consignee: {
          Reference1: "",
          PartyAddress: {
            Line1: request.customerAddressLine,
            City: request.customerCity,
            CountryCode: request.customerCountry,
          },
          Contact: {
            PersonName: request.customerName,
            PhoneNumber1: request.customerPhone,
            EmailAddress: request.customerEmail,
          },
        },
        ShippingDateTime: new Date().toISOString(),
        Details: {
          Dimensions: {
            Length: request.dimensions?.length || 0,
            Width: request.dimensions?.width || 0,
            Height: request.dimensions?.height || 0,
            Unit: "cm",
          },
          ActualWeight: { Value: request.weight, Unit: "KG" },
          ProductGroup: "EXP",
          ProductType: "PPX",
          PaymentType: "P",
          PaymentOptions: "",
          NumberOfPieces: 1,
          DescriptionOfGoods: request.descriptionOfGoods,
          GoodsOriginCountry: request.originCountry,
        },
      };

      const params = {
        ClientInfo: clientInfo,
        Transactions: [{ Reference1: `SHIP_${Date.now()}` }],
        Shipments: [shipment],
      };

      const client = await soap.createClientAsync(wsdlUrl);
      const [result] = await client.CreateShipmentsAsync(params);

      if (result.HasErrors) {
        const notifications = result.Notifications?.Notification;
        let errorMsg = "Failed to create shipment";
        if (notifications) {
          errorMsg = Array.isArray(notifications)
            ? notifications.map((n: any) => n.Message).join(" | ")
            : notifications.Message;
        }
        logger.error("Aramex shipment creation error:", errorMsg);
        return { success: false, error: errorMsg };
      }

      const shipmentResp = result.Shipments?.[0];
      if (!shipmentResp) {
        return { success: false, error: "No shipment data returned" };
      }

      const awb = shipmentResp.ID;
      const labelURL = shipmentResp.LabelURL || null;

      logger.info(`Aramex shipment created: AWB ${awb}`);
      return { success: true, awb, labelURL };
    } catch (error) {
      logger.error("Error in createShipment:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      };
    }
  }

  async getShipmentLabel(request: GetLabelRequest): Promise<GetLabelResponse> {
    try {
      const settings = await this.getSettings();
      if (!settings || !settings.enabled) {
        return {
          success: false,
          error: "Aramex service is not configured or disabled",
        };
      }

      const clientInfo = this.getClientInfo(settings);
      const wsdlUrl = this.getWsdlUrl(settings.environment);

      const params = {
        ClientInfo: clientInfo,
        ShipmentNumber: request.awb,
        ProductGroup: "EXP",
        OriginEntity: settings.accountEntity,
      };

      const client = await soap.createClientAsync(wsdlUrl);
      const [result] = await client.PrintLabelAsync(params);

      if (result.HasErrors) {
        const errorMsg =
          result.Notifications?.Notification?.Message ||
          "Failed to get label";
        logger.error("Aramex label retrieval error:", errorMsg);
        return { success: false, error: errorMsg };
      }

      const labelContent = result.Labels?.LabelContent;
      if (!labelContent) {
        return { success: false, error: "Label content not found in response" };
      }

      logger.info(`Aramex label retrieved for AWB: ${request.awb}`);
      return { success: true, label: labelContent };
    } catch (error) {
      logger.error("Error in getShipmentLabel:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      };
    }
  }

  async schedulePickup(
    request: SchedulePickupRequest
  ): Promise<SchedulePickupResponse> {
    try {
      const settings = await this.getSettings();
      if (!settings || !settings.enabled) {
        return {
          success: false,
          error: "Aramex service is not configured or disabled",
        };
      }

      const clientInfo = this.getClientInfo(settings);
      const wsdlUrl = this.getWsdlUrl(settings.environment);
      const senderInfo = settings.senderInfo;
      const pickupInfo = settings.pickupInfo;

      const pickup: AramexPickup = {
        PickupAddress: {
          Line1: senderInfo.addressLine,
          City: request.pickupCity || senderInfo.city,
          CountryCode: request.pickupCountry || settings.accountCountryCode,
        },
        PickupContact: {
          PersonName: senderInfo.contactPerson,
          PhoneNumber1: senderInfo.phoneNumber,
          CellPhone: senderInfo.phoneNumber,
          EmailAddress: senderInfo.emailAddress,
        },
        ReadyTime: pickupInfo.readyTime,
        LastPickupTime: pickupInfo.lastPickupTime,
        ClosingTime: pickupInfo.closingTime,
        PickupDate:
          request.pickupDate || new Date().toISOString().split("T")[0],
        PackageCount: 1,
        Weight: { Value: request.weight, Unit: "KG" },
        Comments: `Please pick up the package with AWB ${request.awb}`,
        Reference1: request.awb,
      };

      const params = {
        ClientInfo: clientInfo,
        Pickup: pickup,
      };

      const client = await soap.createClientAsync(wsdlUrl);
      const [result] = await client.CreatePickupAsync(params);

      if (result.HasErrors) {
        const errMsg =
          result.Notifications?.Notification?.Message ||
          "Failed to schedule pickup";
        logger.error("Aramex pickup scheduling error:", errMsg);
        return { success: false, error: errMsg };
      }

      const confirmation = result.PickupGUID || result.Id || null;
      logger.info(`Aramex pickup scheduled: ${confirmation} for AWB ${request.awb}`);
      return { success: true, pickupReference: confirmation };
    } catch (error) {
      logger.error("Error in schedulePickup:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      };
    }
  }
}

export const aramexService = new AramexService();